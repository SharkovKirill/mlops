# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import models_fitting_pb2 as models__fitting__pb2


class ModelTransferStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAvModelTypes = channel.unary_unary(
                '/model_fitting.ModelTransfer/GetAvModelTypes',
                request_serializer=models__fitting__pb2.AvailableModelTypesRequest.SerializeToString,
                response_deserializer=models__fitting__pb2.AvailableModelTypesResponse.FromString,
                )
        self.InitModel = channel.unary_unary(
                '/model_fitting.ModelTransfer/InitModel',
                request_serializer=models__fitting__pb2.InitModelRequest.SerializeToString,
                response_deserializer=models__fitting__pb2.InitModelResponse.FromString,
                )
        self.FitModel = channel.unary_unary(
                '/model_fitting.ModelTransfer/FitModel',
                request_serializer=models__fitting__pb2.FitModelRequest.SerializeToString,
                response_deserializer=models__fitting__pb2.FitModelResponse.FromString,
                )
        self.PredModel = channel.unary_unary(
                '/model_fitting.ModelTransfer/PredModel',
                request_serializer=models__fitting__pb2.PredictModelRequest.SerializeToString,
                response_deserializer=models__fitting__pb2.PredictModelResponse.FromString,
                )
        self.DelModel = channel.unary_unary(
                '/model_fitting.ModelTransfer/DelModel',
                request_serializer=models__fitting__pb2.DeleteModelRequest.SerializeToString,
                response_deserializer=models__fitting__pb2.DeleteModelResponse.FromString,
                )


class ModelTransferServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAvModelTypes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FitModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelTransferServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAvModelTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvModelTypes,
                    request_deserializer=models__fitting__pb2.AvailableModelTypesRequest.FromString,
                    response_serializer=models__fitting__pb2.AvailableModelTypesResponse.SerializeToString,
            ),
            'InitModel': grpc.unary_unary_rpc_method_handler(
                    servicer.InitModel,
                    request_deserializer=models__fitting__pb2.InitModelRequest.FromString,
                    response_serializer=models__fitting__pb2.InitModelResponse.SerializeToString,
            ),
            'FitModel': grpc.unary_unary_rpc_method_handler(
                    servicer.FitModel,
                    request_deserializer=models__fitting__pb2.FitModelRequest.FromString,
                    response_serializer=models__fitting__pb2.FitModelResponse.SerializeToString,
            ),
            'PredModel': grpc.unary_unary_rpc_method_handler(
                    servicer.PredModel,
                    request_deserializer=models__fitting__pb2.PredictModelRequest.FromString,
                    response_serializer=models__fitting__pb2.PredictModelResponse.SerializeToString,
            ),
            'DelModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DelModel,
                    request_deserializer=models__fitting__pb2.DeleteModelRequest.FromString,
                    response_serializer=models__fitting__pb2.DeleteModelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'model_fitting.ModelTransfer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelTransfer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAvModelTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_fitting.ModelTransfer/GetAvModelTypes',
            models__fitting__pb2.AvailableModelTypesRequest.SerializeToString,
            models__fitting__pb2.AvailableModelTypesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_fitting.ModelTransfer/InitModel',
            models__fitting__pb2.InitModelRequest.SerializeToString,
            models__fitting__pb2.InitModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FitModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_fitting.ModelTransfer/FitModel',
            models__fitting__pb2.FitModelRequest.SerializeToString,
            models__fitting__pb2.FitModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PredModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_fitting.ModelTransfer/PredModel',
            models__fitting__pb2.PredictModelRequest.SerializeToString,
            models__fitting__pb2.PredictModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/model_fitting.ModelTransfer/DelModel',
            models__fitting__pb2.DeleteModelRequest.SerializeToString,
            models__fitting__pb2.DeleteModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
